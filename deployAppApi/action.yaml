name: 'Deploy App Api'
description: 'Deploys the code for a SISCloud App Api to its lambda'
inputs:

  artifact_s3_bucket:
    description: "The name of the s3 bucket where the lambda code artifact is stored"
    required: true

  artifact_s3_key:
    description: "The path to the artifact within the bucket"
    required: true

  collective:
    description: "The collective to deploy to"
    required: true

  environment:
    description: "The environment to deploy to"
    required: true

  lambda_function_name:
    description: "The full name of the lambda function to deploy to"
    default: "unset"

runs:
  using: "composite"
  steps:
    - name: Deploy app api
      shell: bash
      run: |
        $GITHUB_ACTION_PATH/deploy.sh \
          --collective ${{ inputs.collective }} \
          --environment ${{ inputs.environment }} \
          --lambda-function-name ${{ inputs.lambda_function_name }} \
          --artifact-s3-bucket ${{ inputs.artifact_s3_bucket }} \
          --artifact-s3-key ${{ inputs.artifact_s3_key }}

    # - name: Determine lambda name
    #   shell: bash
    #   id: lambda_name
    #   run: |
    #     # per the terraform definition, the lambda name defaults to the name of the code artifact without the extension
    #     if [[ ${{ inputs.lambda_function_name }} == "unset" ]]; then
    #       artifact=$(basename ${{ inputs.artifact_s3_key }})
    #       name=${{ inputs.collective }}-${{ inputs.environment }}-${artifact%.zip}
    #     else
    #       name=${{ inputs.lambda_function_name }}
    #     fi
    #     echo "::set-output name=lambda_function_name::$name"


    # - name: Deploy App Api
    #   shell: bash
    #   run: |
    #     aws lambda update-function-code \
    #       --function-name ${{ steps.lambda_name.outputs.lambda_function_name }} \
    #       --s3-bucket ${{ inputs.artifact_s3_bucket }} \
    #       --s3-key    ${{ inputs.artifact_s3_key }} \
    #       > /dev/null # don't print the whole lambda config
